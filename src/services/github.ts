export interface GitHubFile {
  path: string;
  content: string;
  type: string;
}

export interface CreateBranchResponse {
  branchName: string;
  branchUrl: string;
  prUrl: string;
}

export class GitHubService {
  private token: string;
  private baseUrl = 'https://api.github.com';

  constructor(token?: string) {
    this.token = token || '';
  }

  /**
   * Create a new instance using stored GitHub token
   */
  static async fromStoredToken(): Promise<GitHubService> {
    const { GitHubAuthService } = await import('./githubAuth');
    const token = await GitHubAuthService.getGitHubToken();
    if (!token) {
      throw new Error('No GitHub token found. Please connect your GitHub account first.');
    }
    return new GitHubService(token);
  }

  private async request(endpoint: string, options: RequestInit = {}) {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      ...options,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`GitHub API error: ${response.status} - ${error}`);
    }

    return response.json();
  }

  private parseRepoUrl(repoUrl: string): { owner: string; repo: string } {
    const match = repoUrl.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    if (!match) {
      throw new Error('Invalid GitHub repository URL');
    }
    return { owner: match[1], repo: match[2].replace('.git', '') };
  }

  async createLocalizationBranch(
    repoUrl: string, 
    files: GitHubFile[]
  ): Promise<CreateBranchResponse> {
    const { owner, repo } = this.parseRepoUrl(repoUrl);
    const branchName = `localization-${Date.now()}`;

    try {
      // Get the default branch reference
      const defaultBranch = await this.request(`/repos/${owner}/${repo}`);
      const mainBranchRef = await this.request(`/repos/${owner}/${repo}/git/ref/heads/${defaultBranch.default_branch}`);
      
      // Create new branch
      await this.request(`/repos/${owner}/${repo}/git/refs`, {
        method: 'POST',
        body: JSON.stringify({
          ref: `refs/heads/${branchName}`,
          sha: mainBranchRef.object.sha,
        }),
      });

      // Create/update files in the new branch
      for (const file of files) {
        const fileContent = btoa(unescape(encodeURIComponent(file.content)));
        
        try {
          // Try to get existing file to check if it exists
          const existingFile = await this.request(`/repos/${owner}/${repo}/contents/${file.path}?ref=${branchName}`);
          
          // Update existing file
          await this.request(`/repos/${owner}/${repo}/contents/${file.path}`, {
            method: 'POST',
            body: JSON.stringify({
              message: `Update ${file.path} with localization`,
              content: fileContent,
              branch: branchName,
              sha: existingFile.sha,
            }),
          });
        } catch (error) {
          // File doesn't exist, create new file
          await this.request(`/repos/${owner}/${repo}/contents/${file.path}`, {
            method: 'POST',
            body: JSON.stringify({
              message: `Add ${file.path} for localization`,
              content: fileContent,
              branch: branchName,
            }),
          });
        }
      }

      // Create pull request
      const pullRequest = await this.request(`/repos/${owner}/${repo}/pulls`, {
        method: 'POST',
        body: JSON.stringify({
          title: 'Add Internationalization (i18n) Support',
          head: branchName,
          base: defaultBranch.default_branch,
          body: `This PR adds internationalization support with the following changes:

## 📋 Changes Included

- **i18n Configuration**: Complete React i18next setup with language detection
- **Translation Files**: Pre-generated translation files for selected languages
- **String Extraction**: Extracted ${files.filter(f => f.type === 'translation').length} translatable strings from the codebase
- **Setup Instructions**: README with step-by-step integration guide

## 🌍 Languages Added

${files.filter(f => f.type === 'translation').map(f => `- ${f.path}`).join('\n')}

## 🚀 Next Steps

1. Review the generated files
2. Install required dependencies: \`npm install react-i18next i18next i18next-browser-languagedetector\`
3. Import the i18n configuration in your main application file
4. Replace hardcoded strings with translation functions using \`useTranslation\` hook
5. Test the application with different languages

## 🔧 Generated by GitHub Localization Tool

This PR was automatically generated to help internationalize your application.`,
        }),
      });

      return {
        branchName,
        branchUrl: `https://github.com/${owner}/${repo}/tree/${branchName}`,
        prUrl: pullRequest.html_url,
      };

    } catch (error) {
      console.error('Failed to create branch and PR:', error);
      throw new Error(`Failed to create localization branch: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async checkRepositoryPermissions(repoUrl: string): Promise<boolean> {
    try {
      const { owner, repo } = this.parseRepoUrl(repoUrl);
      const repoData = await this.request(`/repos/${owner}/${repo}`);
      return repoData.permissions?.push === true;
    } catch (error) {
      console.error('Failed to check repository permissions:', error);
      return false;
    }
  }
}